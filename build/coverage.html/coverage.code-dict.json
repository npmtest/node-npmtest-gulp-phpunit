{"/home/travis/build/npmtest/node-npmtest-gulp-phpunit/test.js":"/* istanbul instrument in package npmtest_gulp_phpunit */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-phpunit/lib.npmtest_gulp_phpunit.js":"/* istanbul instrument in package npmtest_gulp_phpunit */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_phpunit = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_phpunit = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-phpunit/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-phpunit && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_phpunit */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_phpunit\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_phpunit.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_phpunit.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_phpunit.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_phpunit.__dirname + '/lib.npmtest_gulp_phpunit.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-phpunit/node_modules/gulp-phpunit/index.js":"/*global require*/\n/*global module*/\n\n'use strict';\n\nvar VERSION     = require('./package.json').version;\nvar PLUGIN_NAME = require('./package.json').name;\n\nvar _        = require('lodash');\nvar map      = require('map-stream');\nvar gutil    = require('gulp-util');\nvar os       = require('os');\nvar chalk    = require('chalk');\nvar msg      = require('gulp-messenger');\nvar notifier = require('node-notifier');\nvar utils    = require('./src/utils.js');\nvar shell    = require('shelljs');\n\nmodule.exports = function (command, opt, callback) {\n\n\tvar cmd      = '';\n\tvar launched = false;\n\tvar skip     = false;\n\n\t// Assign default options if one is not supplied\n\topt = opt || {};\n\n\t// merge default options and user supplied options\n\tvar defaultOptions = {\n\n\t\t// plugin specific options (not associated with phpunit options)\n\t\tsilent:             false,\n\t\tdebug:              false,\n\t\tclear:              false,\n\t\tdryRun:             false,\n\t\tnotify:             true,\n\t\tstatusLine:         true,\n\t\tshowData:           false,\n\n\t\t// code coverage options\n\t\tcoverageClover:     '',\n\t\tcoverageCrap4j:     '',\n\t\tcoverageHtml:       '',\n\t\tcoveragePhp:        '',\n\t\tcoverageText:       '',\n\t\tcoverageXml:        '',\n\n\t\t// logging options\n\t\tlogJunit:           '',\n\t\tlogTap:             '',\n\t\tlogJson:            '',\n\t\ttestdoxHtml:        '',\n\t\ttestdoxText:        '',\n\n\t\t// test selection options\n\t\tfilter:             '',\n\t\ttestClass:          '',\n\t\ttestSuite:          '',\n\t\tgroup:              '',\n\t\texcludeGroup:       '',\n\t\tlistGroups:         '',\n\t\ttestSuffix:         '',\n\n\t\t// test execution options\n\t\treportUselessTests: false,\n\t\tstrictCoverage:     false,\n\t\tdisallowTestOutput: false,\n\t\tenforceTimeLimit:   false,\n\t\tdisallowTodoTests:  false,\n\t\tstrict:             false,\n\n\t\tprocessIsolation:   false,\n\t\tnoGlobalsBackup:    false,\n\t\tstaticBackup:       false,\n\n\t\tcolors:             'always',\n\t\tstderr:             false,\n\t\tstopOnError:        false,\n\t\tstopOnFailure:      false,\n\t\tstopOnRisky:        false,\n\t\tstopOnSkipped:      false,\n\t\tstopOnIncomplete:   false,\n\t\tverbose:            false,\n\n\t\tloader:             '',\n\t\trepeat:             '',\n\t\ttap:                false,\n\t\ttestdox:            false,\n\t\tprinter:            '',\n\n\t\t// configuration options\n\t\tbootstrap:          '',\n\t\tconfigurationFile:  '',\n\t\tnoConfiguration:    false,\n\t\tnoCoverage:         false,\n\t\tincludePath:        ''\n\n\t};\n\topt = _.defaults( opt, defaultOptions );\n\n\t// If path to phpunit bin not supplied, use default vendor/bin path\n\tif (!command) {\n\t\tcommand = './vendor/bin/phpunit';\n\n\t\t// Use the backslashes on Windows\n\t\tif (os.platform() === 'win32') {\n\t\t\tcommand = command.replace(/[/]/g, '\\\\');\n\t\t}\n\t}\n\telse {\n\t\tif (typeof command !== 'string') {\n\t\t\tthrow new gutil.PluginError(PLUGIN_NAME, 'Command Not Found: PHPUnit');\n\t\t}\n\t}\n\n\n\n\n\treturn map( function (file, cb) {\n\t\t// First file triggers the command, so other files does not matter\n\t\tif (launched) {\n\t\t\treturn cb(null, file);\n\t\t}\n\t\tlaunched = true;\n\n\t\t/* code coverage */\n\t\tif(opt.coverageClover)      { cmd += ' --coverage-clover=' + opt.coverageClover; }\n\t\tif(opt.coverageCrap4j)      { cmd += ' --coverage-crap4j=' + opt.coverageCrap4j; }\n\t\tif(opt.coverageHtml)        { cmd += ' --coverage-html=' + opt.coverageHtml; }\n\t\tif(opt.coveragePhp)         { cmd += ' --coverage-php=' + opt.coveragePhp; }\n\t\tif(opt.coverageText)        { cmd += ' --coverage-text=' + opt.coverageText; }\n\t\tif(opt.coverageXml)         { cmd += ' --coverage-xml=' + opt.coverageXml; }\n\n\t\t/* logging options */\n\t\tif(opt.logJunit)            { cmd += ' --log-junit=' + opt.logJunit; }\n\t\tif(opt.logTap)              { cmd += ' --log-tap=' + opt.logTap; }\n\t\tif(opt.logJson)             { cmd += ' --log-json=' + opt.logJson; }\n\t\tif(opt.testdoxHtml)         { cmd += ' --testdox-html=' + opt.testdoxHtml; }\n\t\tif(opt.testdoxText)         { cmd += ' --testdox-text=' + opt.testdoxText; }\n\n\t\t/* test selection */\n\t\tif(opt.filter)              { cmd += ' --filter=' + opt.filter; }\n\t\tif(opt.group)               { cmd += ' --group=' + opt.group; }\n\t\tif(opt.excludeGroup)        { cmd += ' --exclude-group=' + opt.excludeGroup; }\n\t\tif(opt.listGroups)          { cmd += ' --list-groups=' + opt.listGroups; }\n\t\tif(opt.testSuffix)          { cmd += ' --test-suffix=' + opt.testSuffix; }\n\n\t\t/* test execution options */\n\t\tif(opt.reportUselessTests)  { cmd += ' --report-useless-tests'; }\n\t\tif(opt.strictCoverage)      { cmd += ' --strict-coverage'; }\n\t\tif(opt.disallowTestOutput)  { cmd += ' --disallow-test-output'; }\n\t\tif(opt.enforceTimeLimit)    { cmd += ' --enforce-time-limit'; }\n\t\tif(opt.disallowTodoTests)   { cmd += ' --disallow-todo-tests'; }\n\t\tif(opt.strict)              { cmd += ' --strict'; }\n\t\tif(opt.processIsolation)    { cmd += ' --process-isolation'; }\n\t\tif(opt.noGlobalsBackup)     { cmd += ' --no-globals-backup'; }\n\t\tif(opt.staticBackup)        { cmd += ' --static-backup'; }\n\t\tif(opt.colors)              {\n\t\t\tif ( opt.colors !== 'disabled') {\n\t\t\t\tif ( opt.colors === 'enabled') {\n\t\t\t\t\tcmd += ' --colors';\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcmd += ' --colors=' + opt.colors;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(opt.stderr)              { cmd += ' --stderr'; }\n\t\tif(opt.stopOnError)         { cmd += ' --stop-on-error'; }\n\t\tif(opt.stopOnFailure)       { cmd += ' --stop-on-failure'; }\n\t\tif(opt.stopOnRisky)         { cmd += ' --stop-on-risky'; }\n\t\tif(opt.stopOnSkipped)       { cmd += ' --stop-on-skipped'; }\n\t\tif(opt.stopOnIncomplete)    { cmd += ' --stop-on-incomplete'; }\n\t\tif(opt.verbose)             { cmd += ' --verbose'; }\n\t\tif(opt.loader)              { cmd += ' --loader=' + opt.loader; }\n\t\tif(opt.repeat)              { cmd += ' --repeat=' + opt.repeat; }\n\t\tif(opt.tap)                 { cmd += ' --tap'; }\n\t\tif(opt.testdox)             { cmd += ' --testdox'; }\n\t\tif(opt.printer)             { cmd += ' --printer=' + opt.printer; }\n\t\tif(opt.debug)               { cmd += ' --debug'; }\n\n\t\t/* configuration options */\n\t\tif(opt.bootstrap)           { cmd += ' --bootstrap=' + opt.bootstrap; }\n\t\tif(opt.includePath)        { cmd += ' --include-path=' + opt.includePath; }\n\n\t\t// after options and switches are added, then add either testClass or testSuite\n\n\t\t// Priority:\n\t\t// - config file path from gulp.src()\n\t\t// - configuration file\n\t\t// - testSuite\n\t\t// - testClass\n\n\t\tif ((file.path) && (! skip) && (!opt.noConfiguration)){\n\t\t\tvar ext = file.path.substr(file.path.lastIndexOf('.') + 1);\n\t\t\tif ( ext === 'xml') {\n\t\t\t\tcmd += ' -c \"' + file.path + '\"'; skip = true;\n\t\t\t}\n\t\t}\n\n\t\tif ((opt.configurationFile.length > 0) && (! skip) && (! opt.noConfiguration)) {\n\t\t\tcmd += ' -c ' + opt.configurationFile;\n\t\t}\n\n\t\tif ((! skip) && (opt.noCoverage)) {\n\t\t\tcmd += ' --no-coverage ';\n\t\t}\n\n\t\tif ((opt.testSuite) && (! skip)) {\n\t\t\tcmd += ' --testsuite ' + opt.testSuite; skip = true;\n\t\t}\n\n\t\tif ((opt.testClass) && (! skip)) {\n\t\t\tcmd += ' ' + opt.testClass; skip = true;\n\t\t}\n\n\t\t// construct command\n\t\tcmd = command + cmd;\n\t\tif ( opt.clear ) {\n\t\t\tcmd = 'clear && ' + cmd;\n\t\t}\n\n\t\t// append debug code if switch enabled\n\t\tif ((opt.debug) || (opt.dryRun)) {\n\t\t\tvar vStr = '[Version] ' + VERSION;\n\t\t\tif(opt.dryRun) {\n\t\t\t\tconsole.log(chalk.green('\\n\\n       *** ' + vStr + ' Dry Run Cmd: ' + cmd  + ' ***\\n'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.log(chalk.yellow('\\n\\n       *** ' + vStr + ' Debug Cmd: ' + cmd  + ' ***\\n'));\n\t\t\t}\n\t\t}\n\n\t\tif (!opt.dryRun) {\n\n\t\t\tshell.exec(cmd,{async: true, silent: opt.silent}, function (error, stdout, stderr) {\n\t\t\t\tif (!opt.silent && stderr) {\n\t\t\t\t\tmsg.error(stderr);\n\t\t\t\t}\n\n\t\t\t\t// call user callback if error occurs\n\t\t\t\tif (error) {\n\t\t\t\t\tif (opt.statusLine) {\n\t\t\t\t\t\tconsole.log('\\n');\n\t\t\t\t\t\tmsg.chalkline.red();\n\t\t\t\t\t}\n\t\t\t\t\tif (opt.debug) {\n\t\t\t\t\t\tmsg.error(error);\n\t\t\t\t\t\tmsg.chalkline.yellow();\n\t\t\t\t\t}\n\t\t\t\t\tif(_.isFunction(callback)) {\n\t\t\t\t\t\tcallback(new gutil.PluginError('gulp-phpunit', stderr || stdout));\n\t\t\t\t\t}\n\t\t\t\t\tcb(error, file);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif ( opt.statusLine ) {\n\t\t\t\t\t\tconsole.log('\\n');\n\t\t\t\t\t\t// if we have skipped tests, we will output a yellow chalkline\n\t\t\t\t\t\t// otherwise it will be green\n\t\t\t\t\t\tif (( opt.debug ) || ( stdout.indexOf('Skipped:') > 0 ) || ( stdout.indexOf('Incomplete:') > 0 )){\n\t\t\t\t\t\t\tmsg.chalkline.yellow();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tmsg.chalkline.green();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(_.isFunction(callback)) {\n\t\t\t\t\t\tcallback(null, stderr || stdout);\n\t\t\t\t\t}\n\t\t\t\t\tcb(null, file);\n\t\t\t\t}\n\n\n\t\t\t\t// if notify flag enabled, show notification\n\t\t\t\tif ( opt.notify ) {\n\t\t\t\t\tvar options = utils.notifyOptions(error ? 'fail' : 'pass',{taskName: 'PHPUnit'});\n\t\t\t\t\tnotifier.notify(options);\n\t\t\t\t}\n\n\t\t\t}).stdout.on('data', function (data) {\n\t\t\t\tif ((!opt.silent) && (opt.showData)) {\n\t\t\t\t\tvar str = data.toString();\n\t\t\t\t\tconsole.log(data);\n\t\t\t\t\tprocess.stdout.write(str);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-phpunit/node_modules/gulp-phpunit/src/utils.js":"var _ = require('lodash');\n\nmodule.exports = {\n\n\tdefaults: function (args) {\n\t\treturn _.defaults(args);\n\t},\n\n\tnotifyOptions: function (status, override) {\n\t\tvar options = {\n\t\t\ttaskName: 'Task',\n\t\t\ttitle: ( status === 'pass') ? 'Passed' : 'Failed',\n\t\t\tmessage: ( status === 'pass' ) ? '<%= taskName %> Completed Successfully' : '<%= taskName %> Failed',\n\t\t\ticon: './node_modules/gulp-phpunit/assets/test-' + status + '.png'\n\t\t};\n\n\t\tvar newOptions     = _.merge(options, override);\n\t\tnewOptions.message = _.template(newOptions.message)(newOptions);\n\t\treturn newOptions;\n\n\t}\n\n};\n"}